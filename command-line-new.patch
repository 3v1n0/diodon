=== modified file 'diodon/main.vala'
--- diodon/main.vala	2015-10-12 17:28:58 +0000
+++ diodon/main.vala	2016-02-17 21:51:52 +0000
@@ -34,28 +34,36 @@
         private static bool show_version = false;
         
         /**
-         * checksums to be pasted. should only be one though
-         */
-        private static string[] checksums;
-        
-        /**
          * main clipboard controller
          */
         private Controller? controller = null;
-        
+
+        /**
+         * determine whether help information should be printed
+         */
+        private static bool show_help = false;
+
+        /**
+         * store unmached options and possible actions
+         */
+        private static string[] remaining_options;
+
         /**
          * list of available command line options
          */
         private static const OptionEntry[] options = {
-            { OPTION_REMAINING, '\0', 0, OptionArg.STRING_ARRAY, ref checksums, null, "[CHECKSUM]" },
+            { OPTION_REMAINING, '\0', 0, OptionArg.STRING_ARRAY, ref remaining_options, null, "<action> | [CHECKSUM]" },
+            { "help", 'h', 0, OptionArg.NONE, ref show_help, "Show help options", null },
             { "version", 'v', 0, OptionArg.NONE, ref show_version, "Print version information", null },
             { null }
         };
         
         public DiodonApplication()
         {
-            Object(application_id: Config.BUSNAME, flags: ApplicationFlags.FLAGS_NONE);
+            Object(application_id: Config.BUSNAME, flags: ApplicationFlags.HANDLES_COMMAND_LINE);
             
+            command_line.connect (handle_command_line);
+
             // add supported actions
             SimpleAction paste_action = new SimpleAction("paste-action", VariantType.STRING);
             paste_action.activate.connect(activate_paste_action);
@@ -64,13 +72,23 @@
         
         public void activate_paste_action(GLib.Variant? parameter)
         {
+
+            if(parameter == null || controller == null) 
+                return;
+
+            string checksum = parameter.get_strv ()[0];
+            if (checksum == null)
+                return;
+
             hold();
-            
-            if(parameter != null && controller != null) {
-                string checksum = parameter.get_string();
-                debug("Execute paste-action with checksum %s", checksum);
-                controller.select_item_by_checksum.begin(checksum);
-            }
+
+            // it might be an uri so we have to remove uri first before
+            // TODO: 
+            // see ZeitgeistClipboardStorage.CLIPBOARD_URI why clipboard:
+            // is used staticly here
+            checksum = checksum.replace("clipboard:", "");
+            debug("Execute paste with checksum %s", checksum);
+            controller.select_item_by_checksum.begin(checksum);
             
             release();
         }
@@ -91,6 +109,81 @@
             }
         }
         
+        /**
+         * Process command line arguments
+         */
+        private int handle_command_line (ApplicationCommandLine command_line)
+        {
+            var args = command_line.get_arguments();
+            show_version = false;
+            show_help = false;
+            remaining_options = new string[args.length];
+
+            StringBuilder summary = new StringBuilder("Actions:\n");
+            if (controller != null)
+            {
+                var descriptions = controller.get_descriptions();
+                if (descriptions.size < 1)
+                    summary.append ("  None");
+                else
+                    foreach (Gee.Map.Entry<string,string> entry in descriptions.entries)
+                        summary.append_printf("  %-25s%s\n", entry.key, entry.value);
+            } else
+            {
+                summary.append("  Actions are only available while diodon is running.");
+            }
+
+            try
+            {
+                OptionContext opt_context = new OptionContext("- GTK+ Clipboard Manager");
+                opt_context.set_summary(summary.str);
+                opt_context.set_help_enabled(false);
+                opt_context.add_main_entries(options, null);
+                opt_context.add_group(Gtk.get_option_group(true));
+                // To support valac 0.22
+                // opt_context.parse_strv (ref args);
+                OptionContextExtended.parse_strv (opt_context, ref args);
+
+                if(show_help) {
+                    command_line.print(opt_context.get_help (true, null));
+                    return 0;
+                }
+            } catch(OptionError e) {
+                stdout.printf("Option parsing failed: %s\n", e.message);
+            }
+
+            if(show_version) {
+                command_line.print("Diodon %s\n", Config.VERSION);
+                return 0;
+            }
+
+            if (remaining_options.length > 0 && remaining_options[0] != null
+                && controller != null)
+            {
+                if (has_action (remaining_options[0]))
+                {
+                    var i = 1;
+                    while (remaining_options[i] != null)
+                        i++;
+
+                    activate_action(remaining_options[0], new Variant.strv(remaining_options[1:i]));
+                    return 0;
+                } else if (remaining_options[0].length == 40)
+                {
+                    activate_action("paste", new Variant.strv(remaining_options[0:1]));
+                    return 0;
+                } else
+                {
+                    debug ("Invalid action '%s'", remaining_options[0]);
+                    return 0;
+                }
+            }
+
+            activate ();
+
+            return 0;
+        }
+
         public static int main(string[] args)
         {
             try {
@@ -103,45 +196,8 @@
                 // diodon should only show up in gnome
                 DesktopAppInfo.set_desktop_env("GNOME");
                 
-                // init vars
-                checksums = new string[1];  // can only process one checksum max
-                
-                // init option context
-                OptionContext opt_context = new OptionContext("- GTK+ Clipboard Manager");
-                opt_context.set_help_enabled(true);
-                opt_context.add_main_entries(options, null);
-                opt_context.add_group(Gtk.get_option_group(true));
-                opt_context.parse(ref args);
-                
-                if(show_version) {
-                    stdout.printf("Diodon %s\n", Config.VERSION);
-                    return 0; // bail out
-                }
-                
-                // check whether there is a checksum of clipboard content to paste
-                string checksum = null;
-                if(checksums.length > 0 && checksums[0] != null) {
-                    checksum = checksums[0];
-                    
-                    // it might be an uri so we have to remove uri first before
-                    // TODO: 
-                    // see ZeitgeistClipboardStorage.CLIPBOARD_URI why clipboard:
-                    // is used staticly here
-                    checksum = checksum.replace("clipboard:", "");
-                }
-                
                 DiodonApplication app = new DiodonApplication();
-                
-                if(checksum != null) {
-                    debug("activate paste-action with checksum %s", checksum);
-                    app.register();
-                    app.activate_action("paste-action", new Variant.string(checksum));
-                    return 0;
-                }
-                
                 return app.run(args);
-            } catch(OptionError e) {
-                stdout.printf("Option parsing failed: %s\n", e.message);
             } catch(Error e) {
                 stdout.printf("Unexpected error occured: %s\n", e.message);
             }

=== modified file 'diodon/wscript_build'
--- diodon/wscript_build	2014-04-21 11:58:46 +0000
+++ diodon/wscript_build	2016-02-17 20:43:01 +0000
@@ -11,6 +11,6 @@
   uselib = 'GTK GIOUNIX',
   use = 'libdiodon',
   cflags = ['-include', 'config.h'],
-  packages = 'gtk+-3.0 gio-unix-2.0 config',
+  packages = 'gtk+-3.0 gio-unix-2.0 config glib-extended',
   source = 'main.vala')
 

=== modified file 'libdiodon/controller.vala'
--- libdiodon/controller.vala	2016-02-13 14:25:49 +0000
+++ libdiodon/controller.vala	2016-02-17 21:42:13 +0000
@@ -37,6 +37,7 @@
         private Peas.ExtensionSet extension_set;
         private Peas.Engine peas_engine;
         private ClipboardMenu recent_menu = null;
+        private Gee.Map<string,string> descriptions;
         private Gee.List<Gtk.MenuItem> static_recent_menu_items;
         private GLib.Regex _filter_pattern = null;
         
@@ -64,11 +65,14 @@
          * Called after recent menu has been rebuilt
          */
         public signal void on_recent_menu_changed(Gtk.Menu recent_menu);
+
+        public delegate void Callback(string[] args);
         
         public Controller()
         {            
             string diodon_dir = Utility.get_user_data_dir();
             clipboard_managers = new Gee.HashMap<ClipboardType, ClipboardManager>();
+            descriptions = new Gee.HashMap<string,string>();
 
             settings_clipboard = new Settings("net.launchpad.Diodon.clipboard");
             settings_plugins = new Settings("net.launchpad.Diodon.plugins");
@@ -92,6 +96,7 @@
         public Controller.with_configuration(ClipboardConfiguration configuration, bool with_zeitgeist=true)
         {
             clipboard_managers = new Gee.HashMap<ClipboardType, ClipboardManager>();
+            descriptions = new Gee.HashMap<string,string>();
             if(with_zeitgeist) {
                 storage = new ZeitgeistClipboardStorage();
             }
@@ -214,6 +219,22 @@
             enable_clipboard_manager(ClipboardType.PRIMARY,
                 configuration.use_primary);
         }
+
+        /**
+         * Add an action to the application
+         */
+        public void add_command_line_action(string name, string desc, Callback callback)
+        {
+            var action = new SimpleAction (name, VariantType.STRING_ARRAY);
+            action.activate.connect ((parameter) => callback (parameter.dup_strv ()));
+            Application.get_default ().add_action (action);
+            descriptions[name] = desc;
+        }
+
+        public Gee.Map<string,string> get_descriptions ()
+        {
+            return descriptions;
+        }
         
         /**
          * Select a clipboard item identified by its checksum

=== added file 'vapi/glib-extended.vapi'
--- vapi/glib-extended.vapi	1970-01-01 00:00:00 +0000
+++ vapi/glib-extended.vapi	2016-02-17 21:53:45 +0000
@@ -0,0 +1,10 @@
+using GLib;
+
+/**
+ * The Vapi files shipped with valac 0.22 doesn't include
+ * OptionContext.parse_strv.
+ */
+public class OptionContextExtended {
+	[CCode (cname = "g_option_context_parse_strv")]
+	public static bool parse_strv (OptionContext obj, [CCode (array_length = false, array_null_terminated = true)] ref string[] argv) throws OptionError;
+}

